import{_ as o,r as s,o as i,c,a as e,b as t,e as l,d as a}from"./app-04d7a41c.js";const r={},d=a(`<h1 id="杂记" tabindex="-1"><a class="header-anchor" href="#杂记" aria-hidden="true">#</a> 杂记</h1><h2 id="深度选择器" tabindex="-1"><a class="header-anchor" href="#深度选择器" aria-hidden="true">#</a> 深度选择器</h2><ul><li><code>/deep/</code>是一个<code>深度选择器</code>,它可以使得样式穿透到子组件中,但是它只能作用于子组件的样式中,不能作用于父组件的样式中.</li></ul><h2 id="回调函数" tabindex="-1"><a class="header-anchor" href="#回调函数" aria-hidden="true">#</a> 回调函数</h2><ul><li><code>回调函数</code>是指将一个函数作为参数传递给另一个函数,在另一个函数中调用这个函数,这个被传递的函数就是<code>回调函数</code></li></ul><h2 id="cookie" tabindex="-1"><a class="header-anchor" href="#cookie" aria-hidden="true">#</a> cookie</h2><p>在网页中，<code>cookie</code> 是一种用于跟踪用户状态和行为的机制。当用户访问一个网站时，网站通过设置 <code>cookie</code> 来存储一些数据，可以在接下来的页面访问过程中轻松地读取这些数据。具体来说，<code>cookie</code> 在网页中有以下几个实质作用：</p><ul><li>保持登录状态：如果一个网站需要用户登录才能访问某些内容，那么该网站可以在用户登录后设置一个 cookie，以便在用户在之后的页面中仍然被认为是已登录状态。这样，用户无需在每次访问网站时都重新登录。</li><li>记录用户偏好：网站可以使用 <code>cookie</code> 记录用户的偏好和设置，以便在用户下次访问时提供更为个性化的体验。例如，一个购物网站可以记录用户浏览过的商品，然后在后续页面展示相关产品或推荐类似产品。</li><li>跨域会话管理：如果一个网站包含多个子域名，那么这些子域名可以共享同一个 cookie。这意味着，用户在一个子域名下登录后，即可在其他子域名下访问其登录状态，无需再次登录。</li><li>跟踪用户行为：网站可以使用 <code>cookie</code> 跟踪用户在网站上的行为和喜好，以便更好地了解用户需求和口味，并提供更为个性化的推荐和服务。例如，一个新闻网站可以使用 <code>cookie</code> 跟踪用户所关注的主题，然后在下次访问时展示相关新闻。 需要注意的是，<code>cookie</code> 也存在一些潜在的安全隐患。例如，如果某个网站设置的 <code>cookie</code> 被黑客窃取，黑客可以通过读取该 <code>cookie</code> 中的数据来模拟用户登录该网站。因此，在使用网站时，需要保护自己的 <code>cookie</code> 不被盗用，以及遵守网站的隐私政策。</li></ul><h2 id="javascript闭包" tabindex="-1"><a class="header-anchor" href="#javascript闭包" aria-hidden="true">#</a> JavaScript闭包</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">outerFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> num1 <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> num2 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> num1 <span class="token operator">+</span> num2<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> innerFunction <span class="token operator">=</span> <span class="token function">outerFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">innerFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 15</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在这个示例中，outerFunction() 定义了一个局部变量 num1，并返回了一个内部函数（也就是闭包）。该内部函数定义了另一个局部变量 num2，并将 num1 和 num2 相加后返回结果。然后，将内部函数赋值给变量 innerFunction，然后调用该函数并输出结果。</li><li>由于 innerFunction 记住了 outerFunction 的作用域，因此可以访问 num1 变量，从而实现将 num1 和 num2 相加的功能。</li><li>闭包在实际开发中有着各种应用场景，例如：实现 JavaScript 模块化、处理回调函数、缓存数据等。</li></ul><h2 id="模块化编程" tabindex="-1"><a class="header-anchor" href="#模块化编程" aria-hidden="true">#</a> 模块化编程</h2><ul><li><code>模块化编程</code>简单来说就是把一个大的程序拆分成一个个小的模块，每个模块都有自己的功能，这样做的好处是可以让程序更加清晰，方便维护.</li><li>比如在一个增删改查页面中,把新增和编辑弹窗单独抽离出来做成一个组件,这样做的好处是可以让代码更加清晰,方便维护,而且可以复用。</li><li>还比如把<code>请求方法</code>单独写在一个文件里,页面通过引入这个文件请求数据,这也是简单的模块化.</li></ul><h2 id="断点" tabindex="-1"><a class="header-anchor" href="#断点" aria-hidden="true">#</a> 断点</h2><ul><li>在代码中使用debugger;</li></ul><h2 id="饿了么级联选择器" tabindex="-1"><a class="header-anchor" href="#饿了么级联选择器" aria-hidden="true">#</a> 饿了么级联选择器</h2>`,16),u={href:"https://element.eleme.cn/#/zh-CN/component/cascader",target:"_blank",rel:"noopener noreferrer"},p=a('<h2 id="跨域问题" tabindex="-1"><a class="header-anchor" href="#跨域问题" aria-hidden="true">#</a> 跨域问题</h2><blockquote><p>Access to XMLHttpRequest at &#39;http://127.0.0.1:8081/api/getAllMenu&#39; from origin &#39;http://127.0.0.1:5173&#39; has been blocked by CORS policy: No &#39;Access-Control-Allow-Origin&#39; header is present on the requested resource.</p></blockquote><ul><li>妈的重新测试了一般还是不明所以</li></ul><h2 id="定义变量" tabindex="-1"><a class="header-anchor" href="#定义变量" aria-hidden="true">#</a> 定义变量</h2><ul><li>customXXX</li></ul><h2 id="换行符" tabindex="-1"><a class="header-anchor" href="#换行符" aria-hidden="true">#</a> 换行符</h2><ul><li><code>&lt;br&gt;</code></li></ul><h2 id="空格符" tabindex="-1"><a class="header-anchor" href="#空格符" aria-hidden="true">#</a> 空格符</h2><ul><li><code>&amp;nbsp;</code></li></ul><h2 id="伪类和伪元素" tabindex="-1"><a class="header-anchor" href="#伪类和伪元素" aria-hidden="true">#</a> 伪类和伪元素</h2><ul><li>伪类有<code>:hover</code>和<code>:active</code>等等.</li><li>伪元素和伪类都是用来修饰元素的,但是伪元素是用来修饰元素中的内容,而伪类是用来修饰元素本身的.</li><li>伪元素有<code>::before</code>和<code>::after</code></li><li>其中::before 和 :before 是等价的,::after 和 :after 是等价的</li></ul><h2 id="provide和inject是个很大的坑" tabindex="-1"><a class="header-anchor" href="#provide和inject是个很大的坑" aria-hidden="true">#</a> provide和inject是个很大的坑</h2><ul><li>其实是能传递的,只是因为是响应式的数据,修改了子组件,父组件会同时修改,这不好解决</li><li>为什么我只是在data里定义了一个空对象,然后在mounted里赋了下值,就通过provide传递不过去了呢?</li><li>他妈的就算赋好了值传递了过去也不能实现子组件改变,父组件不改变的效果,简直是垃圾,不用了.</li></ul><h2 id="grid的两个属性" tabindex="-1"><a class="header-anchor" href="#grid的两个属性" aria-hidden="true">#</a> grid的两个属性</h2><ul><li><code>justify-content</code>属性是整个内容区域在容器里面的水平位置（左中右）</li><li><code>align-content</code>属性是整个内容区域的垂直位置（上中下）</li></ul><h2 id="google浏览器" tabindex="-1"><a class="header-anchor" href="#google浏览器" aria-hidden="true">#</a> google浏览器</h2><ul><li>google浏览器启用自定义格式设置工具,可以更好的查看ref的值</li></ul><h2 id="el-form中-model-form" tabindex="-1"><a class="header-anchor" href="#el-form中-model-form" aria-hidden="true">#</a> el-form中:model=&quot;form&quot;</h2><ul><li>这个:model=&quot;form&quot;其实是可以不用定义的,把它定义成对象是为了更好地展示数据</li><li>不过定义这个model可以使用from组件自带的验证功能,[ElForm] model is required for validate to work.</li></ul>',19);function h(k,m){const n=s("ExternalLinkIcon");return i(),c("div",null,[d,e("ul",null,[e("li",null,[e("a",u,[t("饿了么级联选择器"),l(n)])])]),p])}const b=o(r,[["render",h],["__file","scattered-notes.html.vue"]]);export{b as default};
